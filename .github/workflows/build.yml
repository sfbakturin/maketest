name: Maketest

on: push

jobs:
  buildtest:
    name: "Maketest ${{matrix.tool.name}} (${{matrix.buildtype.name}} configuration with ${{matrix.sanitizer.name}})"

    strategy:
      fail-fast: false

      matrix:
        tool:
          - {name: Clang 18, cc: clang, version: 18}
          - {name: Clang 17, cc: clang, version: 17}
          - {name: Clang 16, cc: clang, version: 16}
          - {name: Clang 15, cc: clang, version: 15}
          - {name: GCC 12, cc: gcc, version: 12}
          - {name: GCC 11, cc: gcc, version: 11}
          - {name: GCC 10, cc: gcc, version: 10}
          - {name: GCC 9, cc: gcc, version: 9}

        buildtype:
          - {name: Debug, type: debug}
          - {name: Release, type: release}

        sanitizer:
          - {name: no sanitizer, type: none}
          - {name: ThreadSanitizer, type: thread}
          - {name: AddressSanitizer, type: address}
          - {name: LeakSanitizer, type: leak}
          - {name: UndefinedBehaviorSanitizer, type: undefined}
          - {name: MemorySanitizer, type: memory}

        exclude:
          # Sanitizing on release buildtype kinda strange.
          - buildtype: {type: release}
            sanitizer: {type: thread}
          - buildtype: {type: release}
            sanitizer: {type: address}
          - buildtype: {type: release}
            sanitizer: {type: leak}
          - buildtype: {type: release}
            sanitizer: {type: undefined}
          - buildtype: {type: release}
            sanitizer: {type: memory}
          # There is no MemorySanitizer on GCC.
          - tool: {cc: gcc}
            sanitizer: {type: memory}

    runs-on: ubuntu-22.04
    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Update dependencies
        run: sudo apt-get update

      - name: Install essentials
        run: sudo apt-get install -y build-essential binutils binutils-dev libc++-dev libc++abi-dev make python3 wget curl zip unzip pkg-config lsb-release software-properties-common gnupg

      - name: Install GCC
        if: ${{matrix.tool.cc == 'gcc'}}
        run: sudo apt-get install -y gcc-${{matrix.tool.version}}

      - name: Install Clang
        if: ${{matrix.tool.cc == 'clang'}}
        run: |
          wget https://apt.llvm.org/llvm.sh
          sudo bash llvm.sh ${{matrix.tool.version}}

      - uses: actions/checkout@v4

      - name: Build and test all
        run: CC=${{matrix.tool.cc}}-${{matrix.tool.version}} BUILDTYPE=${{matrix.buildtype.type}} SANITIZER=${{matrix.sanitizer.type}} DIRTESTS=tests make all
